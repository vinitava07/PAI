"""
PIPELINE COMPLETA INCEPTION V4 - CLASSIFICA√á√ÉO ALN

Este conjunto de arquivos implementa uma pipeline completa para classifica√ß√£o 
de met√°stase de linfonodos axilares (ALN) usando o modelo Inception V4.

ARQUIVOS CRIADOS:
================

1. inception_pipeline.py
   - Classe principal InceptionALNClassifier
   - Prepara√ß√£o de dados, treinamento e avalia√ß√£o
   - Modifica√ß√£o do modelo Inception V4 para 3 classes

2. train_inception.py  
   - Script de treinamento com diferentes modos
   - Interface de linha de comando
   - Controle de hiperpar√¢metros

3. inception_predictor.py
   - Predi√ß√£o de novos patches
   - Agrega√ß√£o de resultados por paciente
   - Visualiza√ß√£o de resultados

4. compare_methods.py
   - Compara√ß√£o entre Inception V4 e XGBoost
   - An√°lise estat√≠stica detalhada
   - Gr√°ficos comparativos

COMO USAR:
=========

1. TREINAMENTO:
   python train_inception.py
   
   Op√ß√µes:
   - Treinamento r√°pido (5 patches/paciente, 10 √©pocas)
   - Treinamento m√©dio (10 patches/paciente, 30 √©pocas)  
   - Treinamento completo (todos patches, 50 √©pocas)

2. PREDI√á√ÉO:
   python inception_predictor.py
   
   Pode predizer:
   - Um paciente espec√≠fico
   - Todos os pacientes em lote

3. COMPARA√á√ÉO:
   python compare_methods.py
   
   Compara performance entre:
   - Inception V4 (classifica√ß√£o de patches)
   - XGBoost (features morfol√≥gicos)

ESTRUTURA DE DADOS:
==================

Entrada esperada:
- patches/{patient_id}/{patch_files}.jpg
- patient-clinical-data.csv com coluna "ALN status"

Classes:
- N0: Sem met√°stase
- N+(1-2): 1-2 linfonodos positivos
- N+(>2): Mais de 2 linfonodos positivos

REQUISITOS:
===========

- TensorFlow/Keras
- OpenCV
- scikit-learn
- matplotlib
- seaborn
- pandas
- numpy

EXEMPLO DE USO PROGRAM√ÅTICO:
===========================

from inception_pipeline import InceptionALNClassifier

# Treinar modelo
classifier = InceptionALNClassifier("patches", "patient-clinical-data.csv")
datasets = classifier.prepare_dataset(max_patches_per_patient=10)
model = classifier.build_model()
history = classifier.train_model(datasets, epochs=30)
results = classifier.evaluate_model(datasets['test'])

# Predizer novos dados
from inception_predictor import InceptionALNPredictor
predictor = InceptionALNPredictor("model.h5")
results = predictor.predict_patient_patches("patient_123_patches/")

CONFIGURA√á√ïES RECOMENDADAS:
===========================

Para teste r√°pido:
- max_patches_per_patient=5
- epochs=10
- batch_size=8

Para treinamento final:
- max_patches_per_patient=None (todos)
- epochs=50
- batch_size=4 (para evitar problemas de mem√≥ria)

OBSERVA√á√ïES IMPORTANTES:
========================

1. O modelo Inception V4 original est√° em inception.py e N√ÉO foi modificado
2. A pipeline modifica apenas a camada final para 3 classes
3. Usa data augmentation durante treinamento
4. Implementa separa√ß√£o por paciente (n√£o por patch) para evitar data leakage
5. Suporta agrega√ß√£o de predi√ß√µes por paciente (voto majorit√°rio, m√©dia de probabilidades)
6. Inclui visualiza√ß√µes detalhadas e m√©tricas de avalia√ß√£o

RESULTADOS ESPERADOS:
====================

O modelo deve atingir:
- Acur√°cia > 70% na classifica√ß√£o de patches
- Melhor performance na classe N0 (mais amostras)
- Compara√ß√£o interessante com XGBoost baseado em features morfol√≥gicos

ARQUIVOS GERADOS:
================

Durante execu√ß√£o, s√£o gerados:
- best_inception_aln_model.h5 (melhor modelo durante treinamento)
- inception_v4_aln_final.h5 (modelo final)
- predictions.csv (predi√ß√µes em lote)
- method_comparison_results.csv (compara√ß√£o de m√©todos)
- Gr√°ficos de treinamento e avalia√ß√£o

"""

# Fun√ß√£o de verifica√ß√£o do ambiente
def check_environment():
    """Verifica se o ambiente est√° configurado corretamente"""
    
    import sys
    from pathlib import Path
    
    print("üîç VERIFICA√á√ÉO DO AMBIENTE")
    print("="*40)
    
    # Verifica Python
    python_version = sys.version_info
    print(f"üêç Python: {python_version.major}.{python_version.minor}.{python_version.micro}")
    
    if python_version < (3, 7):
        print("‚ö†Ô∏è Recomendado Python 3.7+")
    
    # Verifica bibliotecas
    required_packages = [
        'tensorflow', 'opencv-python', 'scikit-learn',
        'matplotlib', 'seaborn', 'pandas', 'numpy'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            if package == 'opencv-python':
                import cv2
                print(f"‚úÖ OpenCV: {cv2.__version__}")
            elif package == 'tensorflow':
                import tensorflow as tf
                print(f"‚úÖ TensorFlow: {tf.__version__}")
            elif package == 'scikit-learn':
                import sklearn
                print(f"‚úÖ scikit-learn: {sklearn.__version__}")
            else:
                exec(f"import {package}")
                print(f"‚úÖ {package}: instalado")
                
        except ImportError:
            missing_packages.append(package)
            print(f"‚ùå {package}: n√£o encontrado")
    
    # Verifica GPU
    try:
        import tensorflow as tf
        if tf.config.list_physical_devices('GPU'):
            print("‚úÖ GPU: dispon√≠vel")
        else:
            print("‚ö†Ô∏è GPU: n√£o dispon√≠vel (usando CPU)")
    except:
        pass
    
    # Verifica arquivos do projeto
    print(f"\nüìÅ ARQUIVOS DO PROJETO")
    print("="*40)
    
    base_dir = Path(__file__).parent
    
    required_files = [
        'inception.py',
        'patient-clinical-data.csv',
        'patches'
    ]
    
    for file_path in required_files:
        full_path = base_dir / file_path
        if full_path.exists():
            if full_path.is_dir():
                patch_count = len(list(full_path.iterdir()))
                print(f"‚úÖ {file_path}: {patch_count} itens")
            else:
                print(f"‚úÖ {file_path}: encontrado")
        else:
            print(f"‚ùå {file_path}: n√£o encontrado")
    
    # Resumo
    print(f"\nüìã RESUMO")
    print("="*40)
    
    if missing_packages:
        print(f"‚ùå Pacotes faltantes: {', '.join(missing_packages)}")
        print(f"üí° Instale com: pip install {' '.join(missing_packages)}")
    else:
        print("‚úÖ Todas as depend√™ncias est√£o instaladas")
        
    print(f"\nüöÄ Para come√ßar, execute:")
    print(f"   python train_inception.py")

if __name__ == "__main__":
    check_environment()
